package ${package}.${moduleName}.controller;

import java.util.Arrays;
import java.util.Map;

import io.renren.framework.annotation.AuthzCode;
import io.renren.framework.annotation.AuthzRegister;
import io.renren.framework.annotation.Login;
import io.renren.framework.annotation.SysLog;
import io.renren.common.utils.AbstractController;
import io.renren.common.validator.ValidatorUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import lombok.extern.slf4j.Slf4j;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.BindingResult;
import javax.validation.Valid;

import ${package}.${moduleName}.request.${className}PageRequest;
import ${package}.${moduleName}.request.${className}InfoRequest;
import ${package}.${moduleName}.request.${className}SaveRequest;
import ${package}.${moduleName}.request.${className}UpdateRequest;
import ${package}.${moduleName}.request.${className}DelRequest;
import ${package}.${moduleName}.request.${className}PushRequest;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;
import ${mainPath}.common.utils.PageUtils;
import ${mainPath}.common.utils.R;


/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Slf4j
@Api(tags = "${comments}")
@RestController
@RequestMapping("/${moduleName}/${pathName}")
public class ${className}Controller extends AbstractController {
    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @Login
    @SysLog("${comments}-列表")
    @PostMapping("list")
    @ApiOperation("列表")
    @ResponseBody
    @AuthzRegister(
            roleName = "${roleName}",
            authoritiesName = "${tableName}",
            authoritiesCnName = "${comments}权限",
            name = "${moduleName}_${pathName}_list",
            cnName = "${comments}-列表",
            describe = "${comments}-列表",
            authzCode = "${moduleName}:${pathName}:list"
    )
    @AuthzCode(authzCode = "${moduleName}:${pathName}:list")
    public R list(@Valid @RequestBody ${className}PageRequest request, BindingResult result) {
        if (result.hasErrors()) {
            return R.onBindingError(result.getAllErrors());
        }
        Map page = ${classname}Service.queryPage(request);
        return R.ok().put("data", page);
    }


    /**
     * 信息
     */
    @Login
    @SysLog("${comments}-信息")
    @PostMapping("info")
    @ApiOperation("信息")
    @ResponseBody
    @AuthzRegister(
            roleName = "${roleName}",
            authoritiesName = "${tableName}",
            authoritiesCnName = "${comments}权限",
            name = "${moduleName}_${pathName}_info",
            cnName = "${comments}-信息",
            describe = "${comments}-信息",
            authzCode = "${moduleName}:${pathName}:info"
    )
    @AuthzCode(authzCode = "${moduleName}:${pathName}:info")
    public R info(@Valid @RequestBody ${className}InfoRequest request, BindingResult result) {
        if (result.hasErrors()) {
            return R.onBindingError(result.getAllErrors());
        }
            ${className}Entity ${classname} = ${classname}Service.getById(request.getId());

        return R.ok().put("data", ${classname});
    }

    /**
     * 保存
     */
    @Login
    @SysLog("${comments}-保存")
    @PostMapping("save")
    @ApiOperation("保存")
    @ResponseBody
    @AuthzRegister(
            roleName = "${roleName}",
            authoritiesName = "${tableName}",
            authoritiesCnName = "${comments}权限",
            name = "${moduleName}_${pathName}_save",
            cnName = "${comments}-保存",
            describe = "${comments}-保存",
            authzCode = "${moduleName}:${pathName}:save"
    )
    @AuthzCode(authzCode = "${moduleName}:${pathName}:save")
    public R save(@Valid @RequestBody ${className}SaveRequest request, BindingResult result) {
        if (result.hasErrors()) {
            return R.onBindingError(result.getAllErrors());
        }
            ${className}Entity entity = new ${className}Entity();

        #foreach ($column in $columns)
            #if($column.attrname != 'status'&&
                $column.attrname != 'remarks'&&
                $column.attrname != 'version'&&
                $column.attrname != 'createdUserId'&&
                $column.attrname != 'createdTime'&&
                $column.attrname != 'modifyTime'&&
                $column.attrname != 'modifyUserId'&&
                $column.attrname != 'sort'&&
                $column.attrname != 'id'&&
                $column.attrname != 'sysSystem'
            )
                entity.set${column.attrName}(request.get${column.attrName}());
            #end
        #end

            ${classname}Service.save(entity);

        return R.ok();
    }

    /**
     * 修改
     */
    @Login
    @SysLog("${comments}-修改")
    @PostMapping("update")
    @ApiOperation("修改")
    @ResponseBody
    @AuthzRegister(
            roleName = "${roleName}",
            authoritiesName = "${tableName}",
            authoritiesCnName = "${comments}权限",
            name = "${moduleName}_${pathName}_update",
            cnName = "${comments}-修改",
            describe = "${comments}-修改",
            authzCode = "${moduleName}:${pathName}:update"
    )
    @AuthzCode(authzCode = "${moduleName}:${pathName}:update")
    public R update(@Valid @RequestBody ${className}UpdateRequest request, BindingResult result) {
        if (result.hasErrors()) {
            return R.onBindingError(result.getAllErrors());
        }
            ${className}Entity entity = new ${className}Entity();



        #foreach ($column in $columns)
            #if($column.attrname != 'status'&&
                $column.attrname != 'remarks'&&
                $column.attrname != 'version'&&
                $column.attrname != 'createdUserId'&&
                $column.attrname != 'createdTime'&&
                $column.attrname != 'modifyTime'&&
                $column.attrname != 'modifyUserId'&&
                $column.attrname != 'sort'&&
                $column.attrname != 'sysSystem')
                entity.set${column.attrName}(request.get${column.attrName}());
            #end
        #end

            ${classname}Service.updateById(entity);

        return R.ok();
    }

    /**
     * 删除
     */
    @Login
    @SysLog("${comments}-删除")
    @PostMapping("delete")
    @ApiOperation("删除")
    @ResponseBody
    @AuthzRegister(
            roleName = "${roleName}",
            authoritiesName = "${tableName}",
            authoritiesCnName = "${comments}权限",
            name = "${moduleName}_${pathName}_delete",
            cnName = "${comments}-删除",
            describe = "${comments}-删除",
            authzCode = "${moduleName}:${pathName}:delete"
    )
    @AuthzCode(authzCode = "${moduleName}:${pathName}:delete")
    public R delete(@Valid @RequestBody ${className}DelRequest request, BindingResult result) {
        if (result.hasErrors()) {
            return R.onBindingError(result.getAllErrors());
        }
        ${classname}Service.removeById(request.getId());
        return R.ok();
    }


    @Login
    @SysLog("${comments}-发布redis")
    @PostMapping("push")
    @ApiOperation("发布redis")
    @ResponseBody
    @AuthzRegister(
            roleName = "${roleName}",
            authoritiesName = "${tableName}",
            authoritiesCnName = "${comments}权限",
            name = "${moduleName}_${pathName}_push",
            cnName = "${comments}-发布redis",
            describe = "${comments}-发布redis",
            authzCode = "${moduleName}:${pathName}:push"
    )
    @AuthzCode(authzCode = "${moduleName}:${pathName}:push")
    public R push(@Valid @RequestBody ${className}PushRequest request, BindingResult result) {
        if (result.hasErrors()) {
            return R.onBindingError(result.getAllErrors());
        }
        ${classname}Service.push(request);
        return R.ok();
    }

}
